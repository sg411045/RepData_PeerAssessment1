library(swirl)
install.packages("swirl")
exit
quit()
library(swirl)
swirl()
swirl()
install_course("Getting_and_Cleaning_Data")
swirl()
Sys.getlocale()
Sys.getlocale("LC_TIME")
library(lubridate)
help(package="lubridate")
help(package=lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
minute(this_moment)
ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("19\20\12")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = 11, minutes = 52)
this_moment
nyc  <- now(tzone = "America/New_York")
nyc
depart <- nyc + days(2)
depart
depart + hours
depart <- depart + hours(17) + minutes(34)
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(50)
?with_tz
arrive <- with_tz(arrive, tzone = "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
install.packages("quantmod")
library(quantmod)
amzn = getSymbols("AMZN",auto.assign=FALSE)
sampleTimes = index(amzn)
sampleTimes
sampleTimesF <- ymd(sampleTimes)
year(sampleTimesF) == 2012
sampleTimesF
year(sampleTimesF[1])
?count
?aggregate
month(sampleTimesF[1])
date(sampleTimesF[1])
wday(sampleTimesF[1])
aggregate(year(sampleTimesF), FUN=count)
aggregate(year(sampleTimesF), FUN=sum
)
aggregate(year(sampleTimesF), by=$1, FUN=sum
aggregate(year(sampleTimesF), by=sampleTimesF$1, FUN=sum
strsplit(sampleTimesF[1], split = list("-"))
strsplit(sampleTimesF[1])
?strsplit
strsplit(sampleTimesF[1], "-")
strsplit(sampleTimesF[1], '-')
class(sampleTimesF)
?apply
source('C:/Workspace/courseraR/GettingAndCleaningData/run_analysis.R')
library(datasets)
hist(airquality)
hist(cars)
hist(cars$speed)
hist(cars$mpg)
hist(cars$dist)
cars
x <- rnorm(100)
plot (x)
x <- rnorm(100)
plot(x)
hist(x)
y <- rnorm(100)
plot(x,y)
q()
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm, col=blues)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green",breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(h=12)
abline(v=12)
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta",lwd=4)
colnames(pollution)
names(pollution)
reg <- table(pollution$region)
reg
barplot(reg, col = wheat)
barplot(reg, col = "wheat")
barplot(reg, col = "wheat", main = "Number of counties in Each Region")
barplot(reg, col = "wheat", main = "Number of Counties in Each Region")
boxplot(pollution, formula(pm25~region), col="red")
boxplot(formula(pm25~region), col="red")
boxplot(pollution, formula(pm25~region), col="red")
boxplot(pollution, col="red")
boxplot(data=pollution, col="red")
boxplot(x=pollution, col="red", formula(pm25~region))
boxplot(formula(pm25~region))
boxplot(formula(pollution$pm25~pollution$region))
boxplot(pollution, col="red",formula(pollution$pm25~pollution$region))
boxplot( col="red",formula(pollution$pm25~pollution$region))
boxplot(pm25 ~ region, data = pollution, col = "red")
par(mfrow=c(2,1),mar=c(4,4,2,1))
east <- subset(pollution, region="east")
east <- subset(pollution, region=="east")
east
head(east)
hist(east$pm25, col="green")
wast <- subset(pollution, region=="wast")
hist(subset(pollution, region=="west")$pm25, col="green")
plot(latitude,pm25, data=pollution)
plot(pollution, latitude,pm25)
with(pollution, plot(latitude, pm25))
abline
abline(h=12, lwd = 2, lty = 2)
plot(pollution$longitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col = pollution$region)
abline(h=12, lwd=2, lty=2)
par(mfrow= c(1, 2), mar = c(5, 4, 2, 1))
west <- subset(pollution, region=="west")
plot(west$latitude, west$pm25, main="west")
plot(west$latitude, west$pm25, main = "West")
plot(eest$latitude, eest$pm25, main = "East")
plot(eest$latitude, east$pm25, main = "East")
plot(east$latitude, east$pm25, main = "East")
?Devices
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
getwd()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, file="geyserplot.png")
dev.off()
head(cars)
with(cars , plot(speed,dist))
quit()
library(swirl)
swirl()
dist(dataFrame)
hc <- hclust(distxy)
plot(hc)
plot(as.dendrogram(hc)
)
abline(h=1.5, col="blue")
abline(h=.4, col="red")
5
12
abline(h=.05, col="green")
dist(dFsm)
plot(hc)
hc
heatmap(dataMatrix,col=cm.colors(25))
heatmap
heatmap(mt)
mt
plot(denmt)
distmy
distmt
cmat
points(cx,cy,col=c("red","orange","purple"),pch=3,lwd=2)
points(cx,cy,col=c("red","orange","purple"),pch=3,cex=2,lwd=2)
mdist(x,y,cx,cy)
apply(distTmp,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust])
tapply(x,newClust,mean)
tapply(y,newClust,mean)
points(newCx,newCy,col=cols1,pch=8,cex=2,lwd=2)
mdist(x,y,newCx,newCy)
apply(distTmp2,2,which.min)
points(x,y,pch=19,cex=2,col=cols1[newClust2])
tapply(y,newClust2,mean)
tapply(x,newClust2,mean)
tapply(y,newClust2,mean)
points(finalCx,finalCy,col=cols1,pch=9,cex=2,lwd=2)
kmeans(dataFrame,centers = 3)
kmObj$iter
plot(x,y,col=kmobj$cluster,pch=19,cex=2)
plot(x,y,col=kmObj$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red", "green",pch=3,cex=3,lwd=3))
points(kmObj$centers,col=c("black","red", "green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
points(kmObj$centers,col=c("black","red", "green"),pch=3,cex=3,lwd=3)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedo
myedit("addPatt.R")
source("addPatt.R",local=TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu * t(matv)
matu %*% t(matv)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
setwd("C:/Workspace/courseraR/RepData_PeerAssessment1")
activitydata <- read.csv("activity.csv")
activitydata$date <- as.Date(activitydata$date)
stepsAggregateData <- aggregate(activitydata[, "steps"], by=list(activitydata$date), FUN=sum, na.rm=T)
hist(stepsAggregateData$x, xlab = "Total steps in a day", ylab = "Frequency", main = "Histogram of steps in a day")
abline(v=median(stepsAggregateData$x, na.rm = T), col="blue", lwd=2)
abline(v=mean(stepsAggregateData$x, na.rm = T), col="red", lwd=2)
legend(x="topright", c("Mean", "Median"), col = c("red","blue"), lwd = c(2,2) )
library(ggplot2)
stepsAcrossIntervalsAggregateData <- aggregate(activitydata[, "steps"], by=list(activitydata$interval), FUN=mean, na.rm=T)
qplot(stepsAcrossIntervalsAggregateData$Group.1, stepsAcrossIntervalsAggregateData$x) + geom_line()
summary(activitydata$steps)
library(dplyr)
intervalsummarydata <- activitydata %>% group_by(interval) %>% summarise_at(vars(steps), funs(mean(., na.rm=T)))
r <- transform(activitydata, steps = ifelse(is.na(steps), intervalsummarydata$steps[intervalsummarydata$interval==interval], steps))
raggregate <- aggregate(r[, "steps"], by=list(r$date), FUN=sum, na.rm=T)
hist(raggregate$x, xlab = "Total steps in a day", ylab = "Frequency", main = "Histogram of steps in a day")
abline(v=median(raggregate$x, na.rm = T), col="blue", lwd=2)
abline(v=mean(raggregate$x, na.rm = T), col="red", lwd=2)
legend(x="topright", c("Mean", "Median"), col = c("red","blue"), lwd = c(2,2) )
summary(r$steps)
lookup()
intervalsummarydata$steps[intervalsummarydata$interval==05]
intervalsummarydata$steps[intervalsummarydata$interval==10]
with(intervalsummarydata, match(05))
match("05", intervalsummarydata)
match("05", intervalsummarydata$interval)
apply(intervalsummarydata, steps, function(r) any(r %in% c("05")))
apply(intervalsummarydata, 1, function(r) any(r %in% c("05")))
r2 <- merge(activitydata, intervalsummarydata, by='interval', all.x = TRUE)
head(r2)
tail(r2)
library(dplyr)
r3 <- activitydata %>%  ifelse(is.na(steps), intervalsummarydata$steps[intervalsummarydata$interval == interval],steps)
head(activitydata)
r3 <- activitydata %>%  ifelse(is.na(steps), 42,steps)
r3 <- activitydata %>% steps <- ifelse(is.na(steps), 42,steps)
r3 <- activitydata %>% steps <- ifelse(is.na(steps), 42,steps)
activitydata %>% steps = ifelse(is.na(steps), intervalsummarydata$steps[intervalsummarydata$interval == interval],steps)
activitydata %>% activitiydata$steps = ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == interval], activitydata$steps)
activitydata %>% activitiydata$steps = ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == activitiydata$interval], activitydata$steps)
activitydata %>% activitiydata$steps = ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == activitydata$interval], activitydata$steps)
with(activitydata, activitiydata$steps = ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == activitydata$interval], activitydata$steps))
with(activitydata, activitiydata$steps <- ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == activitydata$interval], activitydata$steps))
View(activitydata)
with(activitydata, activitiydata$steps <- ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == activitydata$interval], activitydata$steps))
with(activitydata, activitydata$steps <- ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == activitydata$interval], activitydata$steps))
r4 <- with(activitydata, activitydata$steps <- ifelse(is.na(activitydata$steps), intervalsummarydata$steps[intervalsummarydata$interval == activitydata$interval], activitydata$steps))
view(r4)
head(r4)
activitydata <- read.csv("activity.csv")
activitydata$date <- as.Date(activitydata$date)
stepsAggregateData <- aggregate(activitydata[, "steps"], by=list(activitydata$date), FUN=sum, na.rm=T)
hist(stepsAggregateData$x, xlab = "Total steps in a day", ylab = "Frequency", main = "Histogram of steps in a day")
abline(v=median(stepsAggregateData$x, na.rm = T), col="blue", lwd=2)
abline(v=mean(stepsAggregateData$x, na.rm = T), col="red", lwd=2)
legend(x="topright", c("Mean", "Median"), col = c("red","blue"), lwd = c(2,2) )
library(ggplot2)
stepsAcrossIntervalsAggregateData <- aggregate(activitydata[, "steps"], by=list(activitydata$interval), FUN=mean, na.rm=T)
qplot(stepsAcrossIntervalsAggregateData$Group.1, stepsAcrossIntervalsAggregateData$x) + geom_line()
summary(activitydata$steps)
library(dplyr)
intervalsummarydata <- activitydata %>% group_by(interval) %>% summarise_at(vars(steps), funs(mean(., na.rm=T)))
# r <- transform(activitydata, steps = ifelse(is.na(steps), intervalsummarydata$steps[intervalsummarydata$interval==interval], steps))
for (row in 1:nrow(activitydata)) {
steps <- activitydata[row, "steps"]
interval <- activitydata[row, "interval"]
if(is.na(steps)) {
steps <- intervalsummarydata$steps[intervalsummarydata$interval==interval]
activitydata$steps[row] <- steps
}
}
raggregate <- aggregate(r[, "steps"], by=list(r$date), FUN=sum, na.rm=T)
hist(raggregate$x, xlab = "Total steps in a day", ylab = "Frequency", main = "Histogram of steps in a day")
abline(v=median(raggregate$x, na.rm = T), col="blue", lwd=2)
abline(v=mean(raggregate$x, na.rm = T), col="red", lwd=2)
legend(x="topright", c("Mean", "Median"), col = c("red","blue"), lwd = c(2,2) )
summary(r$steps)
library(dplyr)
intervalsummarydata <- activitydata %>% group_by(interval) %>% summarise_at(vars(steps), funs(mean(., na.rm=T)))
# r <- transform(activitydata, steps = ifelse(is.na(steps), intervalsummarydata$steps[intervalsummarydata$interval==interval], steps))
for (row in 1:nrow(activitydata)) {
steps <- activitydata[row, "steps"]
interval <- activitydata[row, "interval"]
if(is.na(steps)) {
steps <- intervalsummarydata$steps[intervalsummarydata$interval==interval]
activitydata$steps[row] <- steps
}
}
raggregate <- aggregate(activitydata[, "steps"], by=list(r$date), FUN=sum, na.rm=T)
hist(raggregate$x, xlab = "Total steps in a day", ylab = "Frequency", main = "Histogram of steps in a day")
abline(v=median(raggregate$x, na.rm = T), col="blue", lwd=2)
abline(v=mean(raggregate$x, na.rm = T), col="red", lwd=2)
legend(x="topright", c("Mean", "Median"), col = c("red","blue"), lwd = c(2,2) )
summary(r$steps)
summary(activitydata$steps)
print("mean :" ,mean(raggregate$x)
median("median :" , raggregate$x)
mean(raggregate$x)
median( raggregate$x)
library(dplyr)
intervalsummarydata <- activitydata %>% group_by(interval) %>% summarise_at(vars(steps), funs(mean(., na.rm=T)))
for (row in 1:nrow(activitydata)) {
steps <- activitydata[row, "steps"]
interval <- activitydata[row, "interval"]
if(is.na(steps)) {
steps <- intervalsummarydata$steps[intervalsummarydata$interval==interval]
activitydata$steps[row] <- steps
}
}
raggregate <- aggregate(activitydata[, "steps"], by=list(activitydata$date), FUN=sum, na.rm=T)
hist(raggregate$x, xlab = "Total steps in a day", ylab = "Frequency", main = "Histogram of steps in a day")
abline(v=mean(raggregate$x, na.rm = T), col="red", lwd=2)
legend(x="topright", c("Mean"), col = c("red","blue"), lwd = c(2,2) )
